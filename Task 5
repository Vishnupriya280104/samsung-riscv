Code for JK Flip-Flop Implementation:

#include "ch32v003fun.h"

#define CLK_PIN    GPIO_Pin_1  // PA1 for Clock
#define J_PIN      GPIO_Pin_1  // PC1 for J input
#define K_PIN      GPIO_Pin_2  // PC2 for K input
#define Q_PIN      GPIO_Pin_3  // PC3 for Q output

void GPIO_InitConfig(void)
{
    // Enable GPIOA and GPIOC clock
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC, ENABLE);
    
    GPIO_InitTypeDef GPIO_InitStruct;

    // Configure PA1 as input for clock
    GPIO_InitStruct.GPIO_Pin = CLK_PIN;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;  // Pull-up input
    GPIO_Init(GPIOA, &GPIO_InitStruct);

    // Configure PC1 (J input), PC2 (K input), and PC3 (Q output)
    GPIO_InitStruct.GPIO_Pin = J_PIN | K_PIN;
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IPU;  // Input pull-up for J and K
    GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.GPIO_Pin = Q_PIN;  // PC3 as output for Q
    GPIO_InitStruct.GPIO_Mode = GPIO_Mode_Out_PP;  // Push-pull output for Q
    GPIO_Init(GPIOC, &GPIO_InitStruct);
}

void JK_FlipFlop(void)
{
    static uint8_t Q = 0;  // Q state
    
    // Read inputs (J and K)
    uint8_t J = GPIO_ReadInputDataBit(GPIOC, J_PIN);
    uint8_t K = GPIO_ReadInputDataBit(GPIOC, K_PIN);
    
    // Process the JK flip-flop logic based on the clock
    if (GPIO_ReadInputDataBit(GPIOA, CLK_PIN) == RESET) {  // Clock pulse
        if (J == 0 && K == 0) {
            // No change (Hold current state)
        } else if (J == 1 && K == 0) {
            // Set Q to 1
            Q = 1;
        } else if (J == 0 && K == 1) {
            // Reset Q to 0
            Q = 0;
        } else if (J == 1 && K == 1) {
            // Toggle Q
            Q = !Q;
        }
        
        // Output the Q value to PC3
        if (Q == 1) {
            GPIO_SetBits(GPIOC, Q_PIN);  // Set Q to 1
        } else {
            GPIO_ResetBits(GPIOC, Q_PIN);  // Set Q to 0
        }
    }
}

int main(void)
{
    // Initialize system
    SystemInit();
    
    // Initialize GPIO pins
    GPIO_InitConfig();
    
    while (1)
    {
        // Continuously check for clock and process JK flip-flop logic
        JK_FlipFlop();
    }
}
